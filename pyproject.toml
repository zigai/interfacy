
[project]
name = "interfacy"
version = "0.3.5"
description = "Interfacy is a library for automatically generating CLI applications from Python functions, methods, classes, or instances using their type annotations and docstrings."
authors = [{ name = "Žiga Ivanšek", email = "ziga.ivansek@gmail.com" }]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.10"
dependencies = ["stdl>=0.6.3", "objinspect>=0.3.0", "strto>=0.2.2"]

classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

keywords = [
    "interfacy",
    "cli",
    "command-line",
    "argparse",
    "cli-generator",
    "cli-builder",
    "cli-framework",
]


[project.optional-dependencies]
full = ["argcomplete", "click"]
click = ["click"]
test = ["pytest", "coverage"]
dev = ["pytest", "black", "ruff", "pre-commit", "coverage", "mypy"]

[project.urls]
Repository = "https://github.com/zigai/interfacy"
Issues = "https://github.com/zigai/interfacy/issues"
Homepage = "https://github.com/zigai/interfacy"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["interfacy"]

[tool.hatch.envs.test]
features = ["test"]
installer = "uv"

[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.test.scripts]
test = "pytest {args}"
cov = "coverage run -m pytest {args}"

[tool.coverage.run]
source = ["interfacy"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
]
omit = ["tests/*", "tests/**"]

[tool.mypy]
python_version = "3.10"
files = ["interfacy"]
exclude = ["^tests/"]

disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_any_generics = true
no_implicit_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
strict_equality = true
ignore_missing_imports = true

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = [
    "F",       # Pyflakes
    "E",       # Pycodestyle (Error)
    'I',       # isort
    'D',       # pydocstyle
    'UP',      # pyupgrade
    'YTT',     # flake8-2020
    'B',       # flake8-bugbear
    "PLE",     # pylint
    'PYI006',  # flake8-pyi
    'PYI019',  # flake8-pyi
    'PYI024',  # flake8-pyi
    'PYI030',  # flake8-pyi
    'PYI062',  # flake8-pyi
    'PYI063',  # flake8-pyi
    'PYI066',  # flake8-pyi
    "RUF001",
    "RUF002",
    "RUF003",
    "RUF005",
    "RUF006",
    "RUF012",
    "RUF013",
    "RUF016",
    "RUF017",
    "RUF018",
    "RUF019",
    "RUF020",
    "RUF021",
    "RUF024",
    "RUF026",
    "RUF030",
    "RUF032",
    "RUF033",
    "RUF034",
    "TRY002",
    "TRY004",
    "TRY201",
    "TRY300",
    "TRY301",
    "TRY400",
    "PERF101",
    "RET503",
    "LOG001",
    "LOG002",
]
ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    'D105',
    'D106',
    'D107',
    'D205',
    "D212",
    'D415',
    'E501',
    'B011',
    'B028',
    'B904',
    'PIE804',
    "N802",
    "N803",
    "N806",
    "UP007",
    "UP038",
]
exclude = ["build", "tests/**"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # Unused import
    "E402", # Module import not at top of file
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.ruff.lint.isort]
known-first-party = ["interfacy", "tests"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.codespell]
skip = '.git,uv.lock'
